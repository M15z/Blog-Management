// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? 
  accounts      Account[]
  sessions      Session[]
  blogs         Blog[]
  comments      Comment[]
  likes         Like[]
  participants ConversationParticipant[]
  messages     Message[]
}

model Conversation {
  id           String                     @id @default(cuid())
  createdAt    DateTime                   @default(now())
  updatedAt    DateTime                   @updatedAt
  participants ConversationParticipant[]
  messages     Message[]

  // Optional: enforce 1:1 uniqueness (sorted pair key)
  pairKey String? @unique
}

model ConversationParticipant {
  id             String        @id @default(cuid())
  userId         String
  conversationId String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId]) // a user joins a conversation only once
}

model Message {
  id             String        @id @default(cuid())
  conversationId String
  senderId       String
  content        String        // text; or store Blob URL for images
  createdAt      DateTime      @default(now())
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User          @relation(fields: [senderId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Blog Models
model Blog {
  id          String    @id @default(cuid())
  title       String
  content     String
  image       String?
  category    String    // Added category field
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]
  likes       Like[]
}

model Comment {
  id          String    @id @default(cuid())
  content     String
  createdAt   DateTime  @default(now())
  authorId    String
  blogId      String
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  blog        Blog      @relation(fields: [blogId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  blogId    String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId]) // Ensures a user can like a blog only once
}
